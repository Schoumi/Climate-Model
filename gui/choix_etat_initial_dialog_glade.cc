// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/camille/ubuntu/CIES/Atelier_projet/projet_climat_new/climat.glade
// for gtk 2.10.6 and gtkmm 2.10.2
//
// Please modify the corresponding derived classes in ./src/choix_etat_initial_dialog.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
#include <sigc++/sigc++.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "choix_etat_initial_dialog_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/button.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/label.h>
#include <gtkmm/radiobutton.h>
#include <gtkmm/box.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/tooltips.h>
#include "traduction.h"

choix_etat_initial_dialog_glade::choix_etat_initial_dialog_glade(
)
{  
   
   Gtk::Dialog *choix_etat_initial_dialog = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::Button *cancelbutton7 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
   Gtk::Button *okbutton7 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-ok")));
   Gtk::Label *label15 = Gtk::manage(new class Gtk::Label(gettext("<b>choix de l'état initial:</b>")));
   Gtk::RadioButton::Group _RadioBGroup_two007_radiobutton;
   two007_radiobutton = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_two007_radiobutton, gettext("Le monde en 2007")));
   m_tooltips.set_tip(*two007_radiobutton,gettext("Représente le monde actuel en tenant compte du réchauffement climatique. Le climat est en déséquilibre."),"");
   etat_initial_1750_radiobutton = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_two007_radiobutton, gettext("Le monde en 1750")));
   m_tooltips.set_tip(*etat_initial_1750_radiobutton,gettext("Représente le monde avant la révolution industrielle. Il s'agit de l'état de référence. Le climat est à l'équilibre."),"");
   etat_initial_precedent_radiobutton = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_two007_radiobutton, gettext("L'état final de la précédente simulation")));
   m_tooltips.set_tip(*etat_initial_precedent_radiobutton,gettext("Ceci vous permet de repartir de l'état final de la précédente simulation."),"");
   etat_initial_autre_radiobutton = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_two007_radiobutton, gettext("autre (état pré-enregistré)")));
   m_tooltips.set_tip(*etat_initial_autre_radiobutton,gettext("Si vous avez déjà enregistré des simulations, ceci vous permet de repartir de l'état final d'une simulation enregistrée."),"");
   filechooserbutton1 = Gtk::manage(new class Gtk::FileChooserButton(gettext("Choix état initial")));
   
   Gtk::HBox *hbox24 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::VBox *vbox36 = Gtk::manage(new class Gtk::VBox(false, 0));
   Gtk::Label *label16 = Gtk::manage(new class Gtk::Label(gettext("<b>régler la durée de la simulation:</b>")));
   Gtk::Label *label1 = Gtk::manage(new class Gtk::Label(gettext("Durée (années): ")));
   Gtk::Adjustment *spinbutton1_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 100, 1, 10, 10));
   spinbutton1 = Gtk::manage(new class Gtk::SpinButton(*spinbutton1_adj, 1, 0));
   
   Gtk::HBox *hbox2 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::VBox *vbox35 = Gtk::manage(new class Gtk::VBox(false, 16));
   cancelbutton7->set_flags(Gtk::CAN_FOCUS);
   cancelbutton7->set_flags(Gtk::CAN_DEFAULT);
   cancelbutton7->set_relief(Gtk::RELIEF_NORMAL);
   okbutton7->set_flags(Gtk::CAN_FOCUS);
   okbutton7->set_flags(Gtk::CAN_DEFAULT);
   okbutton7->set_relief(Gtk::RELIEF_NORMAL);
   choix_etat_initial_dialog->get_action_area()->property_layout_style().set_value(Gtk::BUTTONBOX_END);
   label15->set_alignment(0.5,0.5);
   label15->set_padding(0,0);
   label15->set_justify(Gtk::JUSTIFY_LEFT);
   label15->set_line_wrap(false);
   label15->set_use_markup(true);
   label15->set_selectable(false);
   two007_radiobutton->set_flags(Gtk::CAN_FOCUS);
   two007_radiobutton->set_relief(Gtk::RELIEF_NORMAL);
   two007_radiobutton->set_mode(true);
   two007_radiobutton->set_active(false);
   etat_initial_1750_radiobutton->set_flags(Gtk::CAN_FOCUS);
   etat_initial_1750_radiobutton->set_relief(Gtk::RELIEF_NORMAL);
   etat_initial_1750_radiobutton->set_mode(true);
   etat_initial_1750_radiobutton->set_active(false);
   etat_initial_precedent_radiobutton->set_flags(Gtk::CAN_FOCUS);
   etat_initial_precedent_radiobutton->set_relief(Gtk::RELIEF_NORMAL);
   etat_initial_precedent_radiobutton->set_mode(true);
   etat_initial_precedent_radiobutton->set_active(false);
   etat_initial_autre_radiobutton->set_flags(Gtk::CAN_FOCUS);
   etat_initial_autre_radiobutton->set_relief(Gtk::RELIEF_NORMAL);
   etat_initial_autre_radiobutton->set_mode(true);
   etat_initial_autre_radiobutton->set_active(false);
   filechooserbutton1->set_size_request(250,-1);
   hbox24->pack_start(*etat_initial_autre_radiobutton, Gtk::PACK_SHRINK, 0);
   hbox24->pack_start(*filechooserbutton1);
   vbox36->pack_start(*two007_radiobutton, Gtk::PACK_SHRINK, 0);
   vbox36->pack_start(*etat_initial_1750_radiobutton, Gtk::PACK_SHRINK, 0);
   vbox36->pack_start(*etat_initial_precedent_radiobutton, Gtk::PACK_SHRINK, 0);
   vbox36->pack_start(*hbox24);
   label16->set_alignment(0.5,0.5);
   label16->set_padding(0,0);
   label16->set_justify(Gtk::JUSTIFY_LEFT);
   label16->set_line_wrap(false);
   label16->set_use_markup(true);
   label16->set_selectable(false);
   label1->set_alignment(0.5,0.5);
   label1->set_padding(0,0);
   label1->set_justify(Gtk::JUSTIFY_LEFT);
   label1->set_line_wrap(false);
   label1->set_use_markup(false);
   label1->set_selectable(false);
   spinbutton1->set_flags(Gtk::CAN_FOCUS);
   spinbutton1->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbutton1->set_numeric(false);
   spinbutton1->set_digits(0);
   spinbutton1->set_wrap(false);
   hbox2->pack_start(*label1, Gtk::PACK_SHRINK, 0);
   hbox2->pack_start(*spinbutton1);
   vbox35->pack_start(*label15, Gtk::PACK_SHRINK, 0);
   vbox35->pack_start(*vbox36);
   vbox35->pack_start(*label16, Gtk::PACK_SHRINK, 0);
   vbox35->pack_start(*hbox2);
   choix_etat_initial_dialog->get_vbox()->set_homogeneous(false);
   choix_etat_initial_dialog->get_vbox()->set_spacing(0);
   choix_etat_initial_dialog->get_vbox()->pack_start(*vbox35);
   choix_etat_initial_dialog->set_title(gettext("choix état initial et durée"));
   choix_etat_initial_dialog->set_modal(false);
   choix_etat_initial_dialog->property_window_position().set_value(Gtk::WIN_POS_NONE);
   choix_etat_initial_dialog->set_resizable(true);
   choix_etat_initial_dialog->property_destroy_with_parent().set_value(false);
   choix_etat_initial_dialog->set_has_separator(true);
   choix_etat_initial_dialog->add_action_widget(*cancelbutton7, -6);
   choix_etat_initial_dialog->add_action_widget(*okbutton7, -5);
   cancelbutton7->show();
   okbutton7->show();
   label15->show();
   two007_radiobutton->show();
   etat_initial_1750_radiobutton->show();
   etat_initial_precedent_radiobutton->show();
   etat_initial_autre_radiobutton->show();
   filechooserbutton1->show();
   hbox24->show();
   vbox36->show();
   label16->show();
   label1->show();
   spinbutton1->show();
   hbox2->show();
   vbox35->show();
   //choix_etat_initial_dialog->show();
   cancelbutton7->signal_clicked().connect(sigc::mem_fun(*this, &choix_etat_initial_dialog_glade::on_cancelbutton7_clicked), true);
   okbutton7->signal_clicked().connect(sigc::mem_fun(*this, &choix_etat_initial_dialog_glade::on_okbutton7_clicked), true);
   two007_radiobutton->signal_toggled().connect(sigc::mem_fun(*this, &choix_etat_initial_dialog_glade::on_2007_radiobutton_toggled), true);
   etat_initial_1750_radiobutton->signal_toggled().connect(sigc::mem_fun(*this, &choix_etat_initial_dialog_glade::on_etat_initial_1750_radiobutton_toggled), true);
   etat_initial_precedent_radiobutton->signal_toggled().connect(sigc::mem_fun(*this, &choix_etat_initial_dialog_glade::on_etat_initial_precedent_radiobutton_toggled), true);
   etat_initial_autre_radiobutton->signal_toggled().connect(sigc::mem_fun(*this, &choix_etat_initial_dialog_glade::on_etat_initial_autre_radiobutton_toggled), true);
   filechooserbutton1->signal_file_activated().connect(sigc::mem_fun(*this, &choix_etat_initial_dialog_glade::on_filechooserbutton1_file_activated), true);
   spinbutton1->signal_value_changed().connect(sigc::mem_fun(*this, &choix_etat_initial_dialog_glade::on_spinbutton1_value_changed), true);
}

choix_etat_initial_dialog_glade::~choix_etat_initial_dialog_glade()
{  delete gmm_data;
}
